generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  email                  String        @unique
  username               String        @unique
  password               String
  avatar                 String?
  createdAt              DateTime      @default(now())
  chats                  Chat[]        @relation(fields: [chatIDs], references: [id])
  chatIDs                String[]      @db.ObjectId
  isGuide                Boolean       @default(false)
  isVerified             Boolean       @default(false)
  isOnline               Boolean       @default(false)
  isAvailable            Boolean       @default(false)
  latitude               String?
  longitude              String?
  country                String?
  state                  String?
  city                   String?
  biography              String?
  telephone              String?
  languages              String[]      @default([])
  pointsOfInterest       String[]      @default([])
  identificationImage    String? // New field for identification image
  identificationImageR   String?
  bankAccountIdentifier  String? // New field for bank account identifier
  price                  Float?        @default(0)
  rating                 Float?        @default(0)
  reviews                Review[]
  reservationsAsCustomer Reservation[] @relation(name: "CustomerReservations")
  reservationsAsGuide    Reservation[] @relation(name: "GuideReservations")
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId String   @db.ObjectId
  guideId    String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  // Add other fields as needed
  // Relationships
  customer   User     @relation(name: "CustomerReservations", fields: [customerId], references: [id])
  guide      User     @relation(name: "GuideReservations", fields: [guideId], references: [id])
}

model Review {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userIDs], references: [id])
  userIDs     String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  seenBy      String[]  @db.ObjectId
  messages    Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Country {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  cities City[]
}

model City {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String  @unique
  country   Country @relation(fields: [countryId], references: [id])
  countryId String  @db.ObjectId
}

model Language {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

model PointOfInterest {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}
